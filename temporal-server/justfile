set export # Just variables are exported to environment variables
set fallback # Traverse upward in directory structure to find shared targets

[private]
default:
	just --list

[private]
start-local-registry:
	just --justfile=../justfile start-local-registry

[private]
push-to-local-registry version:
	just --justfile=../justfile push-to-local-registry "temporal-server" $version

[private]
clone-temporal-repo rock_version:
	rm -rf temporal
	git clone --branch "v${rock_version}" --single-branch https://github.com/temporalio/temporal temporal

# Pack the rock for the provided version
pack version:
	just --justfile=../justfile pack temporal-server/${version}

# Clean the rockcraft project of the component and remove any existing rock files
clean version:
	cd "${version#temporal-server/}" && rockcraft clean
	cd "${version#temporal-server/}" && rm -f "$(ls | grep *.rock)"
	rm -rf temporal

# Pack rock for component and run pod with rock in kubernetes
run version: (start-local-registry) (pack version) (push-to-local-registry version)
	#!/usr/bin/bash
	set -euxo pipefail

	trap 'just stop-local-registry' EXIT

	rock_version="${version#temporal-server/}"

	just clone-temporal-repo $rock_version

	extra_options="-d temporal/config/ -e TEMPORAL_ROOT=/etc/temporal -e TEMPORAL_ENVIRONMENT=development-sqlite"
	goss_vars="GOSS_KUBECTL_BIN=\"$(which kubectl)\" GOSS_OPTS=\"--retry-timeout 60s --color\" GOSS_CONTAINER_PATH=\"/etc/temporal\""
	
	eval "env ${goss_vars} kgoss edit -i localhost:5000/temporal-server-dev:${rock_version} ${extra_options}"

	rm -rf temporal

# Pack rock for component and run goss tests with rock in kubernetes
test version: (start-local-registry) (pack version) (push-to-local-registry version)
	#!/usr/bin/bash
	set -euxo pipefail

	trap 'just stop-local-registry' EXIT

	rock_version="${version#temporal-server/}"

	just clone-temporal-repo $rock_version

	extra_options+="-d temporal/config/ -e TEMPORAL_ROOT=/etc/temporal -e TEMPORAL_ENVIRONMENT=development-sqlite"
	goss_vars="GOSS_KUBECTL_BIN=\"$(which kubectl)\" GOSS_OPTS=\"--retry-timeout 60s\" GOSS_CONTAINER_PATH=\"/etc/temporal\""
	
	eval "env ${goss_vars} kgoss run -i localhost:5000/temporal-server-dev:${rock_version} ${extra_options}"

	rm -rf temporal
